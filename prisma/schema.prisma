// -------------------------------------------------------------------
// üìò Prisma Schema for BlogNity
// Includes NextAuth models + Blog + Notifications
// -------------------------------------------------------------------

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// -------------------------------------------------------------------
// üîπ ENUMS
// -------------------------------------------------------------------

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostVisibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  NEW_POST
  BOOKMARK
  ADMIN_ALERT
}

enum EntityType {
  POST
  COMMENT
  USER
}

enum LikeTarget {
  POST
  COMMENT
}

// -------------------------------------------------------------------
// üë§ USER MODEL ‚Äî must align with NextAuth
// -------------------------------------------------------------------
model User {
  id            String    @id @default(cuid()) // ‚úÖ use cuid for compatibility with PrismaAdapter
  role          String    @default("user")
  isAdmin       Boolean   @default(false)
  email         String?   @unique // ‚úÖ must be optional for OAuth-only users
  emailVerified DateTime?
  username      String?   @unique
  name          String?
  bio           String?
  image         String? // ‚úÖ keep "image" (NextAuth expects this field)
  profileImage  String? // optional custom field
  socialLinks   Json? // { twitter: "...", github: "...", linkedin: "..." }
  subscription  String    @default("FREE")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts  Account[]
  sessions  Session[]
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]

  sentFollows       Follow[]       @relation("follower")
  receivedFollows   Follow[]       @relation("following")
  notifications     Notification[] @relation("notificationsReceived")
  sentNotifications Notification[] @relation("notificationsSent")

  @@index([username])
  @@index([email])
}

// -------------------------------------------------------------------
// üìù POST MODEL
// -------------------------------------------------------------------
model Post {
  id           String         @id @default(cuid())
  authorId     String
  title        String
  slug         String         @unique
  thumbnailUrl String?
  excerpt      String?
  content      String
  status       PostStatus     @default(DRAFT)
  visibility   PostVisibility @default(PUBLIC)
  isFeatured   Boolean        @default(false)
  exclusive    Boolean        @default(false)
  readingTime  Int?
  publishedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags      PostTag[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]

  // Counters
  viewsCount     Int @default(0)
  likesCount     Int @default(0)
  commentsCount  Int @default(0)
  bookmarksCount Int @default(0)

  @@index([slug])
  @@index([authorId])
  @@index([publishedAt])
}

// -------------------------------------------------------------------
// üè∑Ô∏è TAGS
// -------------------------------------------------------------------
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts PostTag[]

  @@index([name])
}

// -------------------------------------------------------------------
// üîó POST-TAG PIVOT
// -------------------------------------------------------------------
model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

// -------------------------------------------------------------------
// üí¨ COMMENTS
// -------------------------------------------------------------------
model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  parentId  String?
  content   String
  isEdited  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  reported  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("commentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("commentReplies")
  likes   Like[]

  likesCount Int @default(0)

  @@index([postId])
  @@index([authorId])
}

// -------------------------------------------------------------------
// ‚ù§Ô∏è LIKES
// -------------------------------------------------------------------
model Like {
  id        String     @id @default(cuid())
  userId    String
  target    LikeTarget
  postId    String?
  commentId String?
  createdAt DateTime   @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
}

// -------------------------------------------------------------------
// üîñ BOOKMARKS
// -------------------------------------------------------------------
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

// -------------------------------------------------------------------
// üë• FOLLOW RELATIONSHIP
// -------------------------------------------------------------------
model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

// -------------------------------------------------------------------
// üîî NOTIFICATIONS
// -------------------------------------------------------------------
model Notification {
  id          String           @id @default(cuid())
  recipientId String
  actorId     String
  type        NotificationType
  entityType  EntityType?
  entityId    String?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())

  recipient User @relation("notificationsReceived", fields: [recipientId], references: [id], onDelete: Cascade)
  actor     User @relation("notificationsSent", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([recipientId, isRead])
}

// -------------------------------------------------------------------
// üì© CONTACT MESSAGES
// -------------------------------------------------------------------
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

// -------------------------------------------------------------------
// üîê NEXTAUTH MODELS ‚Äî must match official adapter schema
// -------------------------------------------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
